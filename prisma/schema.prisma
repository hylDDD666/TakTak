generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id              String    @id @default(cuid())
  name            String    @unique @map("userName")
  image           String?   @map("avatar") @default("https://api.dicebear.com/7.x/miniavs/svg?seed=1")
  comment         Comment[]
  likedNum        Int?
  followedBy      User[]    @relation("UserFollows")
  following       User[]    @relation("UserFollows")
  likedVideos     Video[]   @relation("likeRelation")
  collectedVideos Video[]   @relation("collectorRelation")
  creatorVideos   Video[]   @relation("creatorVideos")
  password        String
  email           String?   @unique
  emailVerified   DateTime?
  accounts        Account[]
  sessions        Session[]
  nickName        String?
  desc            String?
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Video {
  id          String    @id @default(cuid())
  desc        String
  author      User      @relation("creatorVideos", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  url         String
  type        String
  tag         String
  cover       String
  shareNum    Int       @default(0)
  videoHeight Int
  videoWidth  Int
  comment     Comment[]
  liker       User[]    @relation("likeRelation")
  collector   User[]    @relation("collectorRelation")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime  @default(now())
  likedNum  Int       @default(0)
  video     Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String
  commentOn Comment?  @relation("subComment", fields: [commentId], references: [id])
  commentBy Comment[] @relation("subComment")
  commentId String?
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}
